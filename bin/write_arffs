#!/usr/bin/env ruby
$LOAD_PATH << File.expand_path("../../lib", __FILE__)
require 'lipid_classifier'

require 'optparse'

options = {}
classifier_optparse = OptionParser.new do |opts|
  opts.banner = "Usage: #{__FILE__} -f FILE [options] "
  opts.banner = %Q{This tool will classify lipids based upon the input files.  By default, input a yaml file containing 'Classification' structs, which this can parse for you. Additional functionality will come in the future }
  opts.on('-f', '--struct_file FILE', 'Parses the yaml file for Classification structs') do |file|
    options[:struct_file] = file
  end
  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
  opts.on("-d", "--distribute [FOLDER]", "Run the analysis and create a set of distributed files for each category, class, subclass, and level4 class") do |d|
    options[:distribute] = d
  end
  opts.on("-m", "--multithread [COUNT]", Integer, "Run the analysis in a multithreaded mode to address scale limitations") do |thread|
    options[:multithread] = thread
  end
  opts.on_tail("-h", "--help", "Show this message") do 
    puts opts
    exit
  end
  opts.on("-r", "--[no-]remove_files", "Remove existing files in the directory") do |r|
    options[:remove_files] = r
  end
  opts.on("--randomize N", Float, "Randomize a subset of the entire dataset for further selection.") do |random|
    options[:randomize] = random
  end
  opts.on("--search STRING", String, "Accept a search string which will be used to select which lmids to classify, for example: `--search FA0203` would select only LMFA0203****** lipids for classification. ") do |search|
    options[:search] = search
  end
end

if ARGV.size == 0
  puts classifier_optparse
  exit
end

classifier_optparse.parse!(ARGV)
LCVERBOSE = options[:verbose]

if options[:remove_files]
  if options[:distribute]
    FileUtils.rm_r Dir.glob(File.join(options[:distribute], "*"))
  end
end

if options[:multithread] # Fork to split the classifications, write them each to the folder, implement threads on writing process
  LipidClassifier::Multithreaded = true
  if options[:struct_file]
    Classification = LipidClassifier::Classification
    classifications = YAML.load_file(options[:struct_file])
    fork_count = options[:multithread]
    pids = []
    forked_size = classifications.size / fork_count.to_f
    if options[:randomize]
      count = (classifications.size * options[:randomize]).ceil
      classifications = classifications.sample(count)
    end
    if options[:search]
      search = Regexp.new options[:search]
      classifications = classifications.select {|a| a[:lmid][search] }
      putsv "There are now #{classifications.size} lmids in your search space."
    end

    classifications.each_slice(forked_size.ceil) do |classification|
      pids << fork do 
        analysis = LipidClassifier::Rules.analyze_classifications(classification)
        if options[:distribute]
          FileUtils.mkdir_p options[:distribute]
          rootfile = File.join(options[:distribute], "root.arff")
          Timeout::timeout(3.0) {File.open(rootfile, 'a').flock(File::LOCK_EX)}
          if File.zero?(rootfile)
            LipidClassifier::Rules.write_analysis_to_arff_file(analysis, rootfile)
          else
            LipidClassifier::Rules.append_analysis_to_arff_file(analysis, rootfile)
          end
          putsv "Rootfile is now #{File.size(rootfile)} bytes"
          File.open(rootfile, 'a').flock(File::LOCK_UN)
          LipidClassifier::Rules.write_layers_to_distributed_arffs(analysis, options[:distribute])
        else
          putsv "Outputting files *arff and *yml, #{options[:struct_file].gsub(".yml", ".arff")} and #{options[:struct_file].gsub(".yml", ".csv")}"
          LipidClassifier::Rules.write_analysis_to_arff_file(analysis, options[:struct_file].gsub(".yml", ".arff"))
        end
        if options[:csv]
          LipidClassifier::Rules.write_analysis_to_csv_file(analysis, options[:struct_file].gsub(".yml", ".csv"))
        end
      end
    end
    p Process.waitall.map{|a| a.last.success?}.uniq
  end
else
  LipidClassifier::Multithreaded = false
  if options[:struct_file]
    Classification = LipidClassifier::Classification
    classifications = YAML.load_file(options[:struct_file])
    analysis = LipidClassifier::Rules.analyze_classifications(classifications)
    putsv "Outputting files *arff and *yml, #{options[:struct_file].gsub(".yml", ".arff")} and #{options[:struct_file].gsub(".yml", ".csv")}"

    if options[:randomize]
      count = (classifications.size * options[:randomize]).ceil
      classifications = classifications.sample(count)
    end
    if options[:search]
      classifications = classifications.select {|a| a.to_s[options[:search]] }
    end

    if options[:distribute]
      LipidClassifier::Rules.write_analysis_to_arff_file(analysis, File.join(options[:distribute], 'root.arff'))
      LipidClassifier::Rules.write_layers_to_distributed_arffs(analysis, options[:distribute])
    end
    LipidClassifier::Rules.write_analysis_to_arff_file(analysis, options[:struct_file].gsub(".yml", ".arff"))
    if options[:csv]
      LipidClassifier::Rules.write_analysis_to_csv_file(analysis, options[:struct_file].gsub(".yml", ".csv"))
    end
  end
end
